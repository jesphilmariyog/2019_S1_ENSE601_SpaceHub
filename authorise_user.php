<?php

function search_for_user($payload, $conn)
{
    // Getting user ID necessary to search in database.
    $id = $payload["sub"];

    // Querying the database to search for the user.
    $query = "SELECT * FROM Account WHERE ExternalID = '$id'";
    $stmt = sqlsrv_query($conn, $query);

    return $stmt;
}

function insert_new_user($payload, $conn)
{
    // Getting user information from the payload generated by verifying ID token.
    $id = $payload["sub"];
    $name = $payload["name"];
    $email = $payload["email"];

    // Inserting user as new record into Account table.
    $query = "INSERT INTO Account (ExternalID, FullName, Email) VALUES ('$id', '$name', '$email')";
    $stmt = sqlsrv_query($conn, $query);

    return $stmt; // To check whether it has been inserted.
}

// Need this library to verify the token.
require_once("google-api-php-client-2.2.3/vendor/autoload.php");

// Verifying token.
$client = new Google_Client(["client_id" => "804162525436-8o6ih6qhd45vt7u7haud9ijs2ulhh2b4.apps.googleusercontent.com"]);
$id_token = $_POST["idtoken"];
$payload = $client->verifyIdToken($id_token);

if ($payload) // If token verified, payload is generated.
{
    // Storing server details into variables.
    $server_name = "tcp:space-hub-server.database.windows.net,1433";
    $username = "space-hub-server@space-hub-server";
    $password = "ENSE601_19";
    $database_name = "space-hub-db";

    // Establishing connection.
    $connection_info = array("UID"=>$username, "PWD"=>$password, "Database"=>$database_name);
    $conn = sqlsrv_connect($server_name, $connection_info);
    if (!$conn) // Connection failed for unspecified reason. Abort.
    {
        print_r(sqlsrv_errors(), true); // Don't use die(). It will cause exits with errors.
    }
    else // Connection passed, continue with code.
    {
        if (!sqlsrv_begin_transaction($conn)) // Transaction failed to start. Abort.
        {
            print_r(sqlsrv_errors(), true);
        }
        else
        {
            // Getting user ID to search for existing users or to create a new user.
            $id = $payload["sub"];
            $stmt1 = search_for_user($payload, $conn);
            if ($stmt1) // The query succeeded.
            {
                if (sqlsrv_fetch($stmt1) === NULL) // No account found with user ID.
                {
                    $stmt2 = insert_new_user($payload, $conn);
                    $stmt3 = search_for_user($payload, $conn); // Fetch the new account.
                    if ($stmt1 && $stmt2 && $stmt3) // If all queries succeeded, commit the transaction.
                    {
                        sqlsrv_fetch($stmt3);
                        $acc_id = sqlsrv_get_field($stmt3, 0);
                        echo($acc_id); // Return the Account ID. TODO remove
                        if (!sqlsrv_commit($conn)) // Commit failed. Rollback transaction.
                        {
                            print_r(sqlsrv_errors(), true);
                            sqlsrv_rollback($conn);
                        }
                        else
                        {
                            // Starting a php session from the authorise user page to set data from here.
                            session_start();
                            $_SESSION['id'] = $acc_id;
                        }
                    }
                    else // Insertion query failed.
                    {
                        print_r(sqlsrv_errors(), true);
                        sqlsrv_rollback($conn);
                    }
                }
                else // Account exists. No need to create a new one.
                {
                    $acc_id = sqlsrv_get_field($stmt1, 0);
                    echo($acc_id); // Return the Account ID. TODO remove
                    // Starting a php session from the authorise user page to set data from here.
                    session_start();
                    $_SESSION['id'] = $acc_id;
                }
            }
            else // Selection query failed.
            {
                print_r(sqlsrv_errors(), true);
                sqlsrv_rollback($conn);
            }
        }
        sqlsrv_close($conn);
    }
}